{"version":3,"sources":["misc.js","base64.js","constantStrings.js","uploadDownload.js","commands.js","index.js"],"names":["copyToClipboard","text","dummy","document","createElement","body","appendChild","value","select","execCommand","removeChild","focusInput","getElementById","focus","print","innerHTML","removeElementById","id","element","parentNode","getHashData","hash","parent","location","JSON","parse","decodeURI","substring","base64ToByteArray","base64","binString","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","byteArrayToBase64","bin","byteLength","String","fromCharCode","btoa","inputCode","imgCode","imgExts","warning","downloadBase64","name","data","a","href","window","URL","createObjectURL","Blob","type","download","click","renderBase64ImageToElement","replace","upload","byteStream","stringify","commands","desc","action","setTimeout","alert","copyDownloadLink","help","helpText","Object","entries","forEach","key","val","evalCommand","cmd","hasOwnProperty","onload","split","ext","includes","fileInput","addEventListener","file","files","reader","FileReader","result","readAsArrayBuffer"],"mappings":"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","file":"src.a0fabf42.js","sourceRoot":"..\\src","sourcesContent":["import { evalCommand } from \"./commands.js\";\r\n\r\nexport function copyToClipboard(text) {\r\n  const dummy = document.createElement(\"textarea\");\r\n  document.body.appendChild(dummy);\r\n  dummy.value = text;\r\n  dummy.select();\r\n  document.execCommand(\"copy\");\r\n  document.body.removeChild(dummy);\r\n}\r\n\r\nexport function focusInput() {\r\n  document.getElementById(\"command-input\").focus();\r\n}\r\n\r\n// like the python print export function, but for this console\r\nexport function print(text) {\r\n  document.getElementById(\"commands\").innerHTML += `<br />${text}`;\r\n}\r\n\r\nexport function removeElementById(id) {\r\n  const element = document.getElementById(id);\r\n  element.parentNode.removeChild(element);\r\n}\r\n\r\nexport function getHashData() {\r\n  // substring to remove the hash\r\n  const hash = parent.location.hash;\r\n  if (hash !== \"\") return JSON.parse(decodeURI(hash.substring(1)));\r\n  return null;\r\n}","// Gets a base64 string and converts it into a Uint8Array\r\nexport function base64ToByteArray(base64) {\r\n  const binString = atob(base64);\r\n  const len = binString.length;\r\n\r\n  const bytes = new Uint8Array(len);\r\n  for (let i = 0; i < len; i++) bytes[i] = binString.charCodeAt(i);\r\n\r\n  return bytes.buffer;\r\n}\r\n\r\n// Gets Uint8Array and converts it into a base64 string\r\nexport function byteArrayToBase64(bytes) {\r\n  let bin = \"\";\r\n  for (let i = 0; i < bytes.byteLength; i++) {\r\n    bin += String.fromCharCode(bytes[i]);\r\n  }\r\n\r\n  return btoa(bin);\r\n}\r\n","// The code injected to add a new command input box\r\nexport const inputCode = `<span style=\"color: aqua\">> </span><input id=\"command-input\" onkeypress=\"if (event.key === 'Enter') evalCommand();\">`;\r\nexport const imgCode = `<img src=\"data:image/png;base64, __replace__\">`;\r\n\r\nexport const imgExts = [\"png\", \"jpg\", \"jpeg\", \"gif\", \"tiff\"];\r\n\r\nexport const warning = `WARNING!\r\nThis site is made for small files.\r\nIf you attempt to upload a file larger than ~1 MiB, even on a good PC,\r\nit will cause high RAM usage, page slowdowns, and stupidly long URLS.\r\nThe upload prompt will appear in 5 seconds.`;\r\n","import { byteArrayToBase64, base64ToByteArray } from \"./base64.js\";\r\nimport { imgCode } from \"./constantStrings.js\";\r\n\r\n// Gets base64 string and downloads it as a byte stream\r\nexport function downloadBase64(name, data) {\r\n  const a = document.createElement(\"a\");\r\n  a.href = window.URL.createObjectURL(\r\n    new Blob([base64ToByteArray(data)], { type: \"application/octet-stream\" })\r\n  );\r\n  a.download = name;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  document.body.removeChild(a);\r\n}\r\n\r\n// Takes an element and renders base64 data to it as an image\r\nexport function renderBase64ImageToElement(data, element) {\r\n  element.innerHTML = imgCode.replace(\"__replace__\", data);\r\n}\r\n\r\n// Gets file, converts it to base64, and sets it as the URL\r\nexport function upload(name, byteStream) {\r\n  parent.location.hash = JSON.stringify({\r\n    name: name,\r\n    data: byteArrayToBase64(byteStream)\r\n  });\r\n}\r\n","import { print, getHashData, copyToClipboard, removeElementById, focusInput } from \"./misc.js\";\r\nimport { downloadBase64 } from \"./uploadDownload.js\";\r\nimport { warning, inputCode } from \"./constantStrings.js\";\r\n\r\nexport const commands = {\r\n  upload: {\r\n    desc: \"prompts you to open a file and 'uploads' it\",\r\n    action: () => {\r\n      print(warning);\r\n      setTimeout(() => document.getElementById(\"file-input\").click(), 5000);\r\n    }\r\n  },\r\n  download: {\r\n    desc: \"downloads the file from the current URL\",\r\n    // Substring it to get rid of the initial `#` character\r\n    action: () => {\r\n      const hash = getHashData();\r\n      if (hash !== null) downloadBase64(hash.name, hash.data);\r\n      else alert(\"No file currently loaded\");\r\n    }\r\n  },\r\n  copyDownloadLink: {\r\n    desc: \"copies the current download link to your clipboard\",\r\n    action: () => copyToClipboard(window.location.href)\r\n  },\r\n  help: {\r\n    desc: \"shows the description of every command\",\r\n    action: () => {\r\n      let helpText = \"Usage:\\n\";\r\n      Object.entries(commands).forEach(\r\n        ([key, val]) => (helpText += `\\`${key}\\` ${val.desc}.\\n`)\r\n      );\r\n\r\n      print(helpText);\r\n    }\r\n  }\r\n};\r\n\r\nexport function evalCommand() {\r\n  const cmd = document.getElementById(\"command-input\").value;\r\n  if (commands.hasOwnProperty(cmd)) commands[cmd].action();\r\n  else print(\"Invalid command.\");\r\n\r\n  // Remove the previous input box\r\n  removeElementById(\"command-input\");\r\n  // Create a new input box\r\n  print(inputCode);\r\n  // Focus it\r\n  focusInput();\r\n}\r\n","import { evalCommand } from \"./commands.js\";\r\nwindow.evalCommand = evalCommand;\r\n\r\nimport { renderBase64ImageToElement, downloadBase64, upload } from \"./uploadDownload.js\";\r\nimport { getHashData, focusInput } from \"./misc.js\";\r\nimport { inputCode, imgExts } from \"./constantStrings\";\r\n\r\nwindow.onload = () => {\r\n  const hash = getHashData();\r\n\r\n  if (hash !== null) {\r\n    const name = hash.name;\r\n    const split = name.split(\".\");\r\n    const ext = split[split.length - 1];\r\n    const data = hash.data;\r\n\r\n    if (imgExts.includes(ext))\r\n      renderBase64ImageToElement(data, document.getElementById(\"img-box\"));\r\n    else downloadBase64(name, data);\r\n  }\r\n\r\n  document.getElementById(\"commands\").innerHTML = \"<br />\" + inputCode;\r\n  focusInput();\r\n\r\n  const fileInput = document.getElementById(\"file-input\");\r\n  fileInput.addEventListener(\"change\", () => {\r\n    const file = fileInput.files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      upload(file.name, new Uint8Array(reader.result));\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  });\r\n};\r\n"]}